var _user$project$Main$classForProgressbar = function (state) {
	var _p0 = state;
	if (_p0.ctor === 'Idle') {
		return '';
	} else {
		return 'loading';
	}
};
var _user$project$Main$toPercentString = function (percentage) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(percentage),
		'%');
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('/download'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Download'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('drop_zone'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Drop files here'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('progress_bar'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class(
									_user$project$Main$classForProgressbar(model.state)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('percent'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {
													ctor: '_Tuple2',
													_0: 'width',
													_1: _user$project$Main$toPercentString(model.percentage)
												},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_user$project$Main$toPercentString(model.percentage)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$start = _elm_lang$core$Native_Platform.outgoingPort(
	'start',
	function (v) {
		return v;
	});
var _user$project$Main$drop = _elm_lang$core$Native_Platform.incomingPort(
	'drop',
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _user$project$Main$progress = _elm_lang$core$Native_Platform.incomingPort('progress', _elm_lang$core$Json_Decode$int);
var _user$project$Main$done = _elm_lang$core$Native_Platform.incomingPort('done', _elm_lang$core$Json_Decode$int);
var _user$project$Main$Model = F2(
	function (a, b) {
		return {state: a, percentage: b};
	});
var _user$project$Main$Loading = {ctor: 'Loading'};
var _user$project$Main$Idle = {ctor: 'Idle'};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A2(_user$project$Main$Model, _user$project$Main$Idle, 0),
	_1: _user$project$Main$start(0)
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'Drop':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{percentage: 0, state: _user$project$Main$Loading}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Progess':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{percentage: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{percentage: 100, state: _user$project$Main$Idle}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$Done = function (a) {
	return {ctor: 'Done', _0: a};
};
var _user$project$Main$Progess = function (a) {
	return {ctor: 'Progess', _0: a};
};
var _user$project$Main$Drop = function (a) {
	return {ctor: 'Drop', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Main$drop(_user$project$Main$Drop),
			_1: {
				ctor: '::',
				_0: _user$project$Main$progress(_user$project$Main$Progess),
				_1: {
					ctor: '::',
					_0: _user$project$Main$done(_user$project$Main$Done),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
